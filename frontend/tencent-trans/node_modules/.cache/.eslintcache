[{"/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/index.js":"1","/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/App.js":"2","/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/reportWebVitals.js":"3","/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/components/id_key_save.js":"4","/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/components/transbtn.js":"5","/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/components/output.js":"6","/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/components/input.js":"7"},{"size":552,"mtime":1701164939835,"results":"8","hashOfConfig":"9"},{"size":655,"mtime":1701240497949,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1701164939835,"results":"11","hashOfConfig":"9"},{"size":1308,"mtime":1701240446939,"results":"12","hashOfConfig":"9"},{"size":2792,"mtime":1701266979825,"results":"13","hashOfConfig":"9"},{"size":289,"mtime":1701240047949,"results":"14","hashOfConfig":"9"},{"size":1176,"mtime":1701266875505,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ruj7q7",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/index.js",[],[],"/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/App.js",["40"],[],"import React ,{useEffect , useState} from \"react\"\r\nimport \"./App.css\"\r\n\r\nimport IdKeySave from \"./components/id_key_save\";\r\nimport TransBtn from \"./components/transbtn\";\r\nimport Output from \"./components/output\";\r\nimport Input from \"./components/input\";\r\n\r\nfunction App() {\r\n  const [output, setOutput] = useState(\"\");\r\n  return (\r\n    <div>\r\n      <h1 style={{ textAlign: 'center' }}>长文本翻译器--Powered by Tencent</h1>\r\n      <div className='container'>\r\n        <IdKeySave />\r\n        <Input setOutput />\r\n        <TransBtn setOutput={setOutput}/>\r\n        <Output output={output}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}  \r\n\r\nexport default App;\r\n","/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/reportWebVitals.js",[],[],"/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/components/id_key_save.js",[],[],"/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/components/transbtn.js",["41"],[],"import React ,{useEffect , useState} from \"react\"\nimport \"./transbtn.css\"\nimport languageData from './languages.json'\n\nexport default function TransBtn ( {setOutput } ) {\n    const [sourceLang , setSourceLang] = useState(\"en\");\n    const [targetLang , setTargetLang] = useState(\"zh\");\n    const [targetOptions , setTargetOptions] = useState([])\n\n    useEffect(() => {\n      \n      if (languageData[sourceLang]) {\n        setTargetOptions(languageData[sourceLang]);\n      }\n    }, [sourceLang]);\n\n    const fetchData = async (input, sourceLang, targetLang, setOutput) => { // 流式获取数据\n        const params = new URLSearchParams({\n          text: input,\n          source_lang: sourceLang,\n          target_lang: targetLang,\n        });\n    \n        const url = `/api/tencent_translate?${params.toString()}`;\n\n        try {\n            const response = await fetch(url);\n\n            const reader = response.body.getReader()\n            let result = '';\n            while (true) {\n              const { done, value } = await reader.read();\n              if (done) break;\n              result += new TextDecoder().decode(value);\n            }\n            console.log(result);\n            setOutput(result); // 使用 setOutput 更新数据\n            \n          } catch (error) {\n            console.error('Fetch error:', error);\n          }\n    };\n\n    const translate = () => { // 发起请求\n        const currentInput = document.getElementById(\"input\").value;\n        const currentSourceLang = document.getElementById(\"sourceLang\").value;\n        const currentTargetLang = document.getElementById(\"targetLang\").value;\n      \n        fetchData(currentInput, currentSourceLang, currentTargetLang, setOutput);\n      };\n\n    return (\n        <div>\n            <div className='button_container'>\n            <span className='lang_button_container'>\n            <span>源语言</span>\n            <select className='button' id=\"sourceLang\" value={sourceLang} onChange={(e) => setSourceLang(e.target.value)}>\n              {Object.keys(languageData).map(lang => (\n                <option key={lang} value={lang}>{languageData[lang][0].name}</option>\n              ))}\n            </select>\n            </span>\n            <button className='button' id=\"trans\" onClick={translate}>翻译</button>\n            <span className='lang_button_container'>\n              <span>目标语言</span>\n              <select className='button' id=\"targetLang\" onChange={(e) => setTargetLang(e.target.value)}>\n                {targetOptions.map(lang => (\n                  <option key={lang.code} value={lang.code}>{lang.name}</option>\n                ))}\n              </select>\n            </span>\n            </div>\n            <div style={{display:'none'}}>翻译中...</div>\n        </div>\n    )\n}","/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/components/output.js",["42","43"],[],"import React , {useState , useEffect} from \"react\";\n\nexport default function Output ({ output }) {\n    return (\n        <div>\n            <textarea className='text_container' placeholder=\"这里将出现等会翻译后的文本\" readOnly id=\"output\" value={output}/>\n        </div>\n    )\n}","/home/jese--ki/projects/Tests_Project/Tencent_Trans/fastapi/frontend/tencent-trans/src/components/input.js",[],[],{"ruleId":"44","severity":1,"message":"45","line":1,"column":16,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"44","severity":1,"message":"48","line":7,"column":12,"nodeType":"46","messageId":"47","endLine":7,"endColumn":22},{"ruleId":"44","severity":1,"message":"49","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"44","severity":1,"message":"45","line":1,"column":28,"nodeType":"46","messageId":"47","endLine":1,"endColumn":37},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'targetLang' is assigned a value but never used.","'useState' is defined but never used."]